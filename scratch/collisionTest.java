import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class collisionTest {

    public static void main(String[] args) throws IOException {

        HashMap<Integer, String> map = new HashMap<>();

        ArrayList<String> names = new ArrayList<>();

        String assetPath = "/Users/StevenMontalbano/Programs/cs1660/FinalProject/frontend/src/main/resources/assets";

        try (Stream<Path> walk = Files.walk(Paths.get(assetPath))) {
            walk                                                                         /*  Recursively Iterate (walk) down all sub directories of the assets using the Stream	  */
                    .filter(f -> !f.toString().contains(".DS_Store"))                        /*  Filter out .DS_Store files generated by the OSX File System 						  */
                    .filter(f -> !f.toString().contains("MANIFEST"))                        /*  Filter out .DS_Store files generated by the OSX File System 						  */
                    .filter(Files::isRegularFile)                                            /*  Filter out non-human-readable files i.e., data files or serialized objects 		  	  */
                    .forEach(f -> names.add(f.toString().split("assets/")[1]));       /*  Filter out the absolute path to display cleaner working directory for user selection  */
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println(names.size());
        System.out.println(names);

        for(String s : names) {
            System.out.println(Math.abs(s.hashCode()));
            map.put(Math.abs(s.hashCode()), s);

        }

        System.out.println(map.size());

//        Map<Integer, List<String>> collisions = Files.lines(Paths.get(System.getProperty("user.home")+ "/corncob_lowercase.txt"))
//                .flatMap(word -> Stream.of(word, word.substring(0, 1).toUpperCase() + word.substring(1)))
//                .collect(Collectors.groupingBy(String::hashCode))
//                .entrySet()
//                .stream()
//                .filter(e -> e.getValue().size() > 1)
//                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
//
//        System.out.printf("Number of collisions: %d%n", collisions.size());
//        collisions.forEach((hash, words) -> System.out.printf("%d: %s%n", hash, words));
    }
}
